require 'json'
require 'httparty'
require 'logger'
require 'yaml'
require 'openssl'
require 'base64'
require 'webrick'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
$logger = Logger.new(STDOUT)
$logger.level = Logger::INFO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
$PACHCA_TOKEN = ENV['PACHCA_TOKEN']
$PACHCA_WEBHOOK_SECRET = ENV['PACHCA_WEBHOOK_SECRET']
$WELCOME_MESSAGE_TYPE = ENV['WELCOME_MESSAGE_TYPE'] || 'default'

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
$DISABLE_SIGNATURE_CHECK = true # ENV['DISABLE_SIGNATURE_CHECK'] == 'true'
$DISABLE_IP_CHECK = true # ENV['DISABLE_IP_CHECK'] == 'true'
$DISABLE_TIMESTAMP_CHECK = true # ENV['DISABLE_TIMESTAMP_CHECK'] == 'true'

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_message_templates
  messages_file = File.join(File.dirname(__FILE__), '..', 'messages.yml')
  if File.exist?(messages_file)
    YAML.load_file(messages_file)
  else
    $logger.warn "–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: #{messages_file}"
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    {
      'short' => "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ü–∞—á–∫–∏!",
      'default' => "üëã –ü—Ä–∏–≤–µ—Ç, %{name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ü–∞—á–∫–∏! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ!",
      'extended' => "# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É, %{name}! üëã\n\n–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ü–∞—á–∫–∏! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏. –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
    }
  end
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_message_content(message_type, user_data = nil)
  templates = load_message_templates
  template = templates[message_type] || templates['default']
  
  if user_data && template.include?('%{name}')
    name = user_data['name'] || '–∫–æ–ª–ª–µ–≥–∞'
    template.gsub('%{name}', name)
  else
    template.gsub('%{name}', '–∫–æ–ª–ª–µ–≥–∞')
  end
end

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ü–∞—á–∫–∏
class PachcaClient
  def initialize(token)
    @token = token
    @base_url = 'https://api.pachca.com/api/shared/v1'
  end

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  def get_user_info(user_id)
    url = "#{@base_url}/users/#{user_id}"
    headers = {
      'Authorization' => "Bearer #{@token}",
      'Content-Type' => 'application/json'
    }
    
    begin
      response = HTTParty.get(url, headers: headers)
      if response.code == 200
        { success: true, data: JSON.parse(response.body) }
      else
        { success: false, error: "–û—à–∏–±–∫–∞ API: #{response.code} - #{response.body}" }
      end
    rescue => e
      { success: false, error: "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: #{e.message}" }
    end
  end

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  def send_welcome_message(user_id, message_type = 'default')
    $logger.info "[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id} (—Ç–∏–ø: #{message_type})"
    user_info = get_user_info(user_id)
    
    message_content = if user_info[:success]
      $logger.info "[DEBUG] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
      get_message_content(message_type, user_info[:data])
    else
      $logger.warn "[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{user_info[:error]}"
      get_message_content(message_type)
    end
    
    $logger.info "[DEBUG] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    url = "#{@base_url}/messages"
    headers = {
      'Authorization' => "Bearer #{@token}",
      'Content-Type' => 'application/json'
    }
    body = {
      'user_id' => user_id,
      'content' => message_content
    }
    
    begin
      response = HTTParty.post(url, headers: headers, body: body.to_json)
      if response.code == 200 || response.code == 201
        $logger.info "[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        { success: true, data: JSON.parse(response.body) }
      else
        $logger.warn "[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{response.code} - #{response.body}"
        { success: false, error: "–û—à–∏–±–∫–∞ API: #{response.code} - #{response.body}" }
      end
    rescue => e
      $logger.error "[DEBUG] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{e.message}"
      { success: false, error: "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: #{e.message}" }
    end
  end
end

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ü–∞—á–∫–∏
def pachca_client
  @pachca_client ||= PachcaClient.new($PACHCA_TOKEN)
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
def verify_signature(payload_body, signature)
  $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: signature=#{signature.inspect}, DISABLE_SIGNATURE_CHECK=#{$DISABLE_SIGNATURE_CHECK}"
  
  if $DISABLE_SIGNATURE_CHECK
    $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    return true
  end
  
  if signature.nil? || $PACHCA_WEBHOOK_SECRET.nil?
    $logger.info "[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç"
    return false
  end
  
  digest = OpenSSL::Digest.new('sha256')
  hmac = OpenSSL::HMAC.hexdigest(digest, $PACHCA_WEBHOOK_SECRET, payload_body)
  expected = "sha256=#{hmac}"
  
  $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: –ø–æ–ª—É—á–µ–Ω–æ=#{signature}, –æ–∂–∏–¥–∞–µ—Ç—Å—è=#{expected}"
  result = (signature == expected)
  $logger.info "[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: #{result}"
  
  result
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è replay-–∞—Ç–∞–∫)
def verify_webhook_timestamp(webhook_timestamp)
  $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞: timestamp=#{webhook_timestamp.inspect}, DISABLE_TIMESTAMP_CHECK=#{$DISABLE_TIMESTAMP_CHECK}"
  
  if $DISABLE_TIMESTAMP_CHECK
    $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    return true
  end
  
  if webhook_timestamp.nil?
    $logger.info "[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è –≤–µ–±—Ö—É–∫–∞"
    return false
  end
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
  begin
    timestamp = Time.at(webhook_timestamp.to_i)
    five_minutes_ago = Time.now - 5 * 60
    result = timestamp > five_minutes_ago
    $logger.info "[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: #{result}, –≤—Ä–µ–º—è –≤–µ–±—Ö—É–∫–∞=#{timestamp}, –ø–æ—Ä–æ–≥=#{five_minutes_ago}"
    result
  rescue => e
    $logger.info "[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏: #{e.message}"
    false
  end
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
def verify_ip_address(request_ip)
  $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞: IP=#{request_ip}, DISABLE_IP_CHECK=#{$DISABLE_IP_CHECK}"
  
  if $DISABLE_IP_CHECK
    $logger.info "[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    return true
  end
  
  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –ü–∞—á–∫–∏
  allowed_ips = ['185.169.155.77', '185.169.155.78', '185.169.155.79']
  result = allowed_ips.include?(request_ip)
  $logger.info "[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: #{result}, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP: #{allowed_ips.join(', ')}"
  result
end

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Proc —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π do |request, response|
Handler = Proc.new do |req, res|
  begin
    $logger.info "[DEBUG] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: #{req.inspect}"
    $logger.info "[DEBUG] –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: #{req.request_method}"
    $logger.info "[DEBUG] –ó–∞–≥–æ–ª–æ–≤–∫–∏: #{req.header.inspect}"
    $logger.info "[DEBUG] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: PACHCA_TOKEN=#{!$PACHCA_TOKEN.nil? && !$PACHCA_TOKEN.empty?}, PACHCA_WEBHOOK_SECRET=#{!$PACHCA_WEBHOOK_SECRET.nil? && !$PACHCA_WEBHOOK_SECRET.empty?}, WELCOME_MESSAGE_TYPE=#{$WELCOME_MESSAGE_TYPE}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    payload_body = if req.body.nil?
      $logger.info "[DEBUG] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ nil, –∏—Å–ø–æ–ª—å–∑—É–µ–º query_string"
      req.query_string || ''
    else
      $logger.info "[DEBUG] –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"
      req.body.read || ''
    end
    
    $logger.info "[DEBUG] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: #{payload_body.inspect}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GET-–∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if req.request_method == 'GET' || payload_body.empty?
      res.status = 200
      res['Content-Type'] = 'application/json'
      res.body = JSON.generate({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST-–∑–∞–ø—Ä–æ—Å —Å —Ç–µ–ª–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞.' })
    else
      # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      signature = req.header['x-pachca-signature']&.first
      request_ip = req.header['x-forwarded-for']&.first || '0.0.0.0'
      request_ip = request_ip.split(',').first.strip if request_ip.is_a?(String)
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      if !verify_ip_address(request_ip)
        $logger.warn "–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: #{request_ip}"
        res.status = 403
        res['Content-Type'] = 'application/json'
        res.body = JSON.generate({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å' })
      elsif !verify_signature(payload_body, signature)
        $logger.warn "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞"
        res.status = 403
        res['Content-Type'] = 'application/json'
        res.body = JSON.generate({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' })
      else
        # –ü–∞—Ä—Å–∏–º JSON
        begin
          payload = JSON.parse(payload_body)
          $logger.info "–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: #{payload.inspect}"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞
          if !verify_webhook_timestamp(payload['webhook_timestamp'])
            $logger.warn "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–µ–±—Ö—É–∫: #{payload['webhook_timestamp']}"
            res.status = 403
            res['Content-Type'] = 'application/json'
            res.body = JSON.generate({ error: '–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–µ–±—Ö—É–∫' })
          elsif payload['type'] == 'company_member' && payload['event'] == 'confirm'
            $logger.info "[DEBUG] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ: type=#{payload['type']}, event=#{payload['event']}"
            $logger.info "[DEBUG] –ü–æ–ª–Ω—ã–π –ø–µ–π–ª–æ–∞–¥ –≤–µ–±—Ö—É–∫–∞: #{payload.inspect}"
            
            user_ids = payload['user_ids']
            $logger.info "[DEBUG] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: #{user_ids.inspect}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
            if $PACHCA_TOKEN.nil? || $PACHCA_TOKEN.empty?
              $logger.error "[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ü–∞—á–∫–∏"
              res.status = 500
              res['Content-Type'] = 'application/json'
              res.body = JSON.generate({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' })
            else
              # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
              $logger.info "[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: #{$WELCOME_MESSAGE_TYPE}"
              results = []
              user_ids.each do |user_id|
                $logger.info "[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}"
                result = pachca_client.send_welcome_message(user_id, $WELCOME_MESSAGE_TYPE)
                $logger.info "[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: #{result.inspect}"
                results << { user_id: user_id, success: result[:success] }
              end
              
              res.status = 200
              res['Content-Type'] = 'application/json'
              res.body = JSON.generate({ message: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', results: results })
            end
          else
            $logger.info "–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞: #{payload['type']} - #{payload['event']}"
            res.status = 200
            res['Content-Type'] = 'application/json'
            res.body = JSON.generate({ message: '–í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' })
          end
        rescue JSON::ParserError => e
          $logger.error "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: #{e.message}"
          res.status = 400
          res['Content-Type'] = 'application/json'
          res.body = JSON.generate({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON' })
        end
      end
    end
  rescue => e
    $logger.error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: #{e.message}\n#{e.backtrace.join("\n")}"
    res.status = 500
    res['Content-Type'] = 'application/json'
    res.body = JSON.generate({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: #{e.message}" })
  end
end
