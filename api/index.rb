require 'json'
require 'httparty'
require 'logger'
require 'yaml'
require 'openssl'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = Logger.new('/tmp/vercel-lambda.log')
logger.level = Logger::INFO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PACHCA_TOKEN = ENV['PACHCA_TOKEN']
PACHCA_WEBHOOK_SECRET = ENV['PACHCA_WEBHOOK_SECRET']
WELCOME_MESSAGE_TYPE = ENV['WELCOME_MESSAGE_TYPE'] || 'default'
DISABLE_SIGNATURE_CHECK = ENV['DISABLE_SIGNATURE_CHECK'] == 'true'
DISABLE_IP_CHECK = ENV['DISABLE_IP_CHECK'] == 'true'
DISABLE_TIMESTAMP_CHECK = ENV['DISABLE_TIMESTAMP_CHECK'] == 'true'

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_message_templates
  messages_file = File.join(File.dirname(__FILE__), '../messages.yml')
  if File.exist?(messages_file)
    YAML.load_file(messages_file)
  else
    logger.warn "–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: #{messages_file}"
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    {
      'short' => "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ü–∞—á–∫–∏!",
      'default' => "# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º.",
      'extended' => "# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –æ—Å–≤–æ–∏—Ç—å—Å—è:\n\n* [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ü–∞—á–∫–∏](https://www.pachca.com/articles)\n* [–ù–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª](https://example.com/portal)\n* [–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã](https://example.com/faq)\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º."
    }
  end
end

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
MESSAGE_TEMPLATES = load_message_templates

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ü–∞—á–∫–∏
class PachcaClient
  def initialize(token)
    @token = token
    @base_url = 'https://api.pachca.com/api/shared/v1'
  end

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
  def get_user_info(user_id)
    url = "#{@base_url}/users/#{user_id}"
    headers = {
      'Authorization' => "Bearer #{@token}",
      'Content-Type' => 'application/json'
    }
    
    begin
      response = HTTParty.get(url, headers: headers)
      if response.code == 200
        { success: true, data: JSON.parse(response.body) }
      else
        { success: false, error: "–û—à–∏–±–∫–∞ API: #{response.code} - #{response.body}" }
      end
    rescue => e
      { success: false, error: "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: #{e.message}" }
    end
  end

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  def send_welcome_message(user_id, message_type = 'default')
    logger.info "[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id} (—Ç–∏–ø: #{message_type})"
    user_info = get_user_info(user_id)
    
    message_content = if user_info[:success]
      logger.info "[DEBUG] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
      get_message_content(message_type, user_info[:data])
    else
      logger.warn "[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{user_info[:error]}"
      get_message_content(message_type)
    end
    
    logger.info "[DEBUG] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    url = "#{@base_url}/messages"
    headers = {
      'Authorization' => "Bearer #{@token}",
      'Content-Type' => 'application/json'
    }
    
    body = {
      recipient_id: user_id,
      content: message_content
    }
    
    begin
      response = HTTParty.post(url, headers: headers, body: body.to_json)
      if response.code == 200 || response.code == 201
        logger.info "[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        { success: true, data: JSON.parse(response.body) }
      else
        logger.warn "[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{response.code} - #{response.body}"
        { success: false, error: "–û—à–∏–±–∫–∞ API: #{response.code} - #{response.body}" }
      end
    rescue => e
      logger.error "[DEBUG] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{e.message}"
      { success: false, error: "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: #{e.message}" }
    end
  end

  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  def get_message_content(message_type, user_data = nil)
    template = MESSAGE_TEMPLATES[message_type] || MESSAGE_TEMPLATES['default']
    
    if user_data && template.include?('{{name}}')
      name = user_data['name'] || '–∫–æ–ª–ª–µ–≥–∞'
      template.gsub('{{name}}', name)
    else
      template
    end
  end
end

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ü–∞—á–∫–∏
def pachca_client
  @pachca_client ||= PachcaClient.new(PACHCA_TOKEN)
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
def verify_signature(payload_body, signature)
  return true if DISABLE_SIGNATURE_CHECK
  return false if signature.nil? || PACHCA_WEBHOOK_SECRET.nil?
  
  digest = OpenSSL::Digest.new('sha256')
  hmac = OpenSSL::HMAC.hexdigest(digest, PACHCA_WEBHOOK_SECRET, payload_body)
  
  signature == "sha256=#{hmac}"
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è replay-–∞—Ç–∞–∫)
def verify_webhook_timestamp(webhook_timestamp)
  return true if DISABLE_TIMESTAMP_CHECK
  return false if webhook_timestamp.nil?
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
  begin
    timestamp = Time.at(webhook_timestamp.to_i)
    current_time = Time.now
    (current_time - timestamp).abs <= 300 # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  rescue
    false
  end
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
def verify_ip_address(request_ip)
  return true if DISABLE_IP_CHECK
  
  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –ü–∞—á–∫–∏
  allowed_ips = ['185.169.155.77', '185.169.155.78', '185.169.155.79']
  allowed_ips.include?(request_ip)
end

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
def handler(event:, context:)
  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  logger.info "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: #{event.inspect}"
  
  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  if event['body']
    payload_body = event['body']
    if event['isBase64Encoded']
      payload_body = Base64.decode64(payload_body)
    end
  else
    payload_body = '{}'
  end
  
  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  headers = event['headers'] || {}
  headers = headers.transform_keys(&:downcase) # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
  
  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  signature = headers['pachca-signature'] || headers['x-pachca-signature'] || headers['x-pachka-signature']
  
  # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å
  request_ip = headers['x-real-ip'] || headers['x-forwarded-for'] || '0.0.0.0'
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  unless verify_ip_address(request_ip)
    logger.warn "–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: #{request_ip}"
    return {
      statusCode: 403,
      body: JSON.generate({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å' })
    }
  end
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
  unless verify_signature(payload_body, signature)
    logger.warn "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞"
    return {
      statusCode: 403,
      body: JSON.generate({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' })
    }
  end
  
  begin
    # –ü–∞—Ä—Å–∏–º JSON
    payload = JSON.parse(payload_body)
    logger.info "–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: #{payload.inspect}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞
    unless verify_webhook_timestamp(payload['webhook_timestamp'])
      logger.warn "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–µ–±—Ö—É–∫: #{payload['webhook_timestamp']}"
      return {
        statusCode: 403,
        body: JSON.generate({ error: '–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–µ–±—Ö—É–∫' })
      }
    end
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤–µ–±—Ö—É–∫–æ–≤ –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    if payload['type'] == 'company_member' && payload['event'] == 'confirm'
      logger.info "–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ"
      user_ids = payload['user_ids']
      logger.info "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: #{user_ids.inspect}"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
      if PACHCA_TOKEN.nil? || PACHCA_TOKEN.empty?
        logger.error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ü–∞—á–∫–∏"
        return {
          statusCode: 500,
          body: JSON.generate({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' })
        }
      end
      
      # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      results = []
      user_ids.each do |user_id|
        logger.info "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}"
        result = pachca_client.send_welcome_message(user_id, WELCOME_MESSAGE_TYPE)
        results << { user_id: user_id, success: result[:success] }
      end
      
      return {
        statusCode: 200,
        body: JSON.generate({ message: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', results: results })
      }
    else
      logger.info "–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞: #{payload['type']} - #{payload['event']}"
      return {
        statusCode: 200,
        body: JSON.generate({ message: '–í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' })
      }
    end
  rescue => e
    logger.error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: #{e.message}\n#{e.backtrace.join("\n")}"
    return {
      statusCode: 500,
      body: JSON.generate({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: #{e.message}" })
    }
  end
end
