require 'sinatra'
require 'json'
require 'httparty'
require 'dotenv/load'
require 'logger'
require 'yaml'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = Logger.new(STDOUT)
logger.level = Logger::INFO

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_message_templates
  messages_file = File.join(File.dirname(__FILE__), 'messages.yml')
  if File.exist?(messages_file)
    YAML.load_file(messages_file)
  else
    logger.warn "–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: #{messages_file}"
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    {
      'short' => "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ü–∞—á–∫–∏!",
      'default' => "# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º.",
      'extended' => "# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –æ—Å–≤–æ–∏—Ç—å—Å—è:\n\n* [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ü–∞—á–∫–∏](https://www.pachca.com/articles)\n* [–ù–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª](https://example.com/portal)\n* [–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã](https://example.com/faq)\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º."
    }
  end
end

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
MESSAGE_TEMPLATES = load_message_templates

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Sinatra
configure do
  set :bind, '0.0.0.0'
  set :port, ENV['PORT'] || 3000
  enable :logging
end

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ü–∞—á–∫–∏
class PachcaClient
  attr_reader :token

  def initialize(token)
    @token = token
    @base_url = 'https://api.pachca.com/api/shared/v1'
  end

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
  def get_user_info(user_id)
    url = "#{@base_url}/users/#{user_id}"
    headers = {
      'Content-Type' => 'application/json; charset=utf-8',
      'Authorization' => "Bearer #{@token}"
    }
    
    response = HTTParty.get(url, headers: headers)
    
    if response.code >= 200 && response.code < 300
      parsed_response = JSON.parse(response.body)
      { success: true, data: parsed_response['data'] }
    else
      error_data = JSON.parse(response.body) rescue { 'errors' => [{ 'detail' => response.body }] }
      { success: false, error: error_data['errors'] }
    end
  end

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  def send_welcome_message(user_id, message_type = 'default')
    logger = Logger.new(STDOUT)
    logger.info "[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id} (—Ç–∏–ø: #{message_type})"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info "[DEBUG] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ #{user_id}"
    user_info = get_user_info(user_id)
    
    if user_info[:success]
      logger.info "[DEBUG] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{user_info[:data].inspect}"
    else
      logger.warn "[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{user_info[:error].inspect}"
    end
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_content = if user_info[:success]
      get_message_content(message_type, user_info[:data])
    else
      # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      get_message_content(message_type)
    end
    
    logger.info "[DEBUG] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: #{message_content}"
    
    url = "#{@base_url}/messages"
    headers = {
      'Content-Type' => 'application/json; charset=utf-8',
      'Authorization' => "Bearer #{@token}"
    }
    
    payload = {
      message: {
        entity_type: 'user',
        entity_id: user_id,
        content: message_content
      }
    }
    
    logger.info "[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: #{url}"
    logger.info "[DEBUG] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: #{headers.inspect}"
    logger.info "[DEBUG] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: #{payload.to_json}"
    
    response = HTTParty.post(url, headers: headers, body: payload.to_json)
    
    logger.info "[DEBUG] –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: #{response.code}"
    logger.info "[DEBUG] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: #{response.body}"
    
    if response.code >= 200 && response.code < 300
      parsed_response = JSON.parse(response.body)
      logger.info "[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: #{parsed_response.inspect}"
      { success: true, data: parsed_response['data'] }
    else
      error_data = JSON.parse(response.body) rescue { 'errors' => [{ 'detail' => response.body }] }
      logger.error "[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{error_data.inspect}"
      { success: false, error: error_data['errors'] }
    end
  end

  private

  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  def get_message_content(message_type, user_data = nil)
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default'
    template = MESSAGE_TEMPLATES[message_type] || MESSAGE_TEMPLATES['default']
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user_data && user_data['first_name'] ? user_data['first_name'] : ''
    name_greeting = user_name.empty? ? '' : ", #{user_name}"
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
    message = template.gsub('{{name_greeting}}', name_greeting)
    
    message
  end
end

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ü–∞—á–∫–∏
def pachca_client
  @pachca_client ||= PachcaClient.new(ENV['PACHCA_TOKEN'])
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
def verify_signature(payload_body, signature)
  return true if ENV['SKIP_SIGNATURE_VERIFICATION'] == 'true'
  
  secret = ENV['PACHCA_WEBHOOK_SECRET']
  return false if secret.nil? || secret.empty?
  
  digest = OpenSSL::Digest.new('sha256')
  calculated_signature = OpenSSL::HMAC.hexdigest(digest, secret, payload_body)
  
  calculated_signature == signature
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è replay-–∞—Ç–∞–∫)
def verify_webhook_timestamp(webhook_timestamp)
  return true if ENV['SKIP_TIMESTAMP_VERIFICATION'] == 'true'
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
  current_time = Time.now.to_i
  webhook_time = webhook_timestamp.to_i
  
  # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã (60 —Å–µ–∫—É–Ω–¥)
  (current_time - webhook_time).abs <= 60
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
def verify_ip_address(request_ip)
  return true if ENV['SKIP_IP_VERIFICATION'] == 'true'
  
  # IP-–∞–¥—Ä–µ—Å –ü–∞—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  pachca_ip = '37.200.70.177'
  
  request_ip == pachca_ip
end

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ü–∞—á–∫–∏
post '/webhook' do
  request.body.rewind
  payload_body = request.body.read
  
  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (pachca-signature —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
  signature = request.env['HTTP_PACHCA_SIGNATURE'] || request.env['HTTP_X_PACHCA_SIGNATURE'] || request.env['HTTP_X_PACHKA_SIGNATURE']
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  unless verify_ip_address(request.ip)
    logger.warn "–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: #{request.ip}"
    halt 403, { error: '–ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å' }.to_json
  end
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
  unless verify_signature(payload_body, signature)
    logger.warn "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞"
    halt 403, { error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' }.to_json
  end
  
  begin
    payload = JSON.parse(payload_body)
    logger.info "[DEBUG] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: #{payload.inspect}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞
    unless verify_webhook_timestamp(payload['webhook_timestamp'])
      logger.warn "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–µ–±—Ö—É–∫: #{payload['webhook_timestamp']}"
      halt 403, { error: '–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–µ–±—Ö—É–∫' }.to_json
    end
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤–µ–±—Ö—É–∫–æ–≤ –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    if payload['type'] == 'company_member' && payload['event'] == 'confirm'
      logger.info "[DEBUG] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ"
      user_ids = payload['user_ids']
      logger.info "[DEBUG] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: #{user_ids.inspect}"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
      if ENV['PACHCA_TOKEN'].nil? || ENV['PACHCA_TOKEN'].empty?
        logger.error "[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (PACHCA_TOKEN)"
        halt 500, { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' }.to_json
      else
        logger.info "[DEBUG] –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: #{ENV['PACHCA_TOKEN'][0..9]}..."
      end
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      logger.info "[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π: #{MESSAGE_TEMPLATES.keys.inspect}"
      
      # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      message_type = ENV['WELCOME_MESSAGE_TYPE'] || 'default'
      logger.info "[DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: #{message_type}"
      
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
      user_ids.each do |user_id|
        logger.info "[DEBUG] –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}"
        result = pachca_client.send_welcome_message(user_id, message_type)
        
        if result[:success]
          logger.info "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}"
        else
          logger.error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}: #{result[:error].inspect}"
        end
      end
    else
      logger.info "[DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: type=#{payload['type']}, event=#{payload['event']}"
    end
    
    status 200
    { status: 'success' }.to_json
  rescue JSON::ParserError => e
    logger.error "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: #{e.message}"
    halt 400, { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON' }.to_json
  rescue => e
    logger.error "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: #{e.message}"
    halt 500, { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }.to_json
  end
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
get '/health' do
  { status: 'ok', timestamp: Time.now.to_i }.to_json
end

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
get '/' do
  <<~HTML
    <!DOCTYPE html>
    <html>
      <head>
        <title>Pachca Welcome Bot</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
          }
          h1 {
            color: #333;
          }
          .status {
            padding: 10px;
            background-color: #e6f7ff;
            border-radius: 4px;
            margin: 20px 0;
          }
        </style>
      </head>
      <body>
        <h1>Pachca Welcome Bot</h1>
        <p>–ë–æ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –ü–∞—á–∫–µ.</p>
        <div class="status">
          <strong>–°—Ç–∞—Ç—É—Å:</strong> –†–∞–±–æ—Ç–∞–µ—Ç
          <br>
          <strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> #{Time.now}
        </div>
        <p>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</p>
        <ul>
          <li><code>PACHCA_TOKEN</code> - —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ API –ü–∞—á–∫–∏</li>
          <li><code>PACHCA_WEBHOOK_SECRET</code> - —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–æ–≤</li>
          <li><code>WELCOME_MESSAGE_TYPE</code> - —Ç–∏–ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (default, extended, short)</li>
          <li><code>PORT</code> - –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)</li>
        </ul>
      </body>
    </html>
  HTML
end
